#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from models import get_db
from models.database import Document, DocumentChunk
from services.document_service import DocumentService

def show_progress(current, total, prefix="", suffix="", length=50):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    percent = ("{0:.1f}").format(100 * (current / float(total)))
    filled_length = int(length * current // total)
    bar = '‚ñà' * filled_length + '-' * (length - filled_length)
    print(f'\r{prefix} |{bar}| {percent}% {suffix}', end='', flush=True)
    if current == total:
        print()

def create_chunks_for_documents():
    """–°–æ–∑–¥–∞–µ—Ç —á–∞–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    db = next(get_db())
    doc_service = DocumentService(db)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        documents = db.query(Document).all()
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        print("=" * 60)
        
        total_documents = len(documents)
        processed_documents = 0
        total_chunks_created = 0
        
        for doc_idx, doc in enumerate(documents, 1):
            print(f"\nüìã –î–æ–∫—É–º–µ–Ω—Ç {doc_idx}/{total_documents}: {doc.original_filename}")
            print(f"   ID: {doc.id} | –°—Ç–∞—Ç—É—Å: {doc.processing_status}")
            
            if doc.extracted_text and len(doc.extracted_text) > 0:
                text_length = len(doc.extracted_text)
                estimated_chunks = (text_length // 500) + 1
                print(f"   üìù –¢–µ–∫—Å—Ç: {text_length:,} —Å–∏–º–≤–æ–ª–æ–≤ (~{estimated_chunks} —á–∞–Ω–∫–æ–≤)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤
                print("   üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤...")
                start_time = time.time()
                
                # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                chunks = doc_service.create_document_chunks(doc.id, show_progress=True)
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –∑–∞ {processing_time:.1f}—Å")
                total_chunks_created += len(chunks)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if len(chunks) > 0:
                    print("   üìä –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤:")
                    for i, chunk in enumerate(chunks[:3]):
                        print(f"      –ß–∞–Ω–∫ {i+1}: {chunk.text[:80]}...")
                    if len(chunks) > 3:
                        print(f"      ... –∏ –µ—â–µ {len(chunks) - 3} —á–∞–Ω–∫–æ–≤")
            else:
                print("   ‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            processed_documents += 1
            show_progress(
                processed_documents, 
                total_documents, 
                "üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", 
                f"({processed_documents}/{total_documents})"
            )
        
        print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {processed_documents}")
        print(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {total_chunks_created}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ
        total_chunks_in_db = db.query(DocumentChunk).count()
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ: {total_chunks_in_db}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_chunks_for_documents()
