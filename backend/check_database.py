"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from app.core.config import settings
from models.database import (
    User, Article, Category, Tag, ChatMessage, Document, DocumentChunk
)
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*60)
    print("–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("="*60)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        db_url = settings.database_url
        print(f"\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {db_url.split('@')[1] if '@' in db_url else db_url}")
        
        engine = create_engine(db_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            if result.fetchone():
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        from models import Base
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü...")
        try:
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ users
            with engine.connect() as conn:
                conn.execute(text("SELECT COUNT(*) FROM users LIMIT 1"))
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã...")
            Base.metadata.create_all(bind=engine)
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        SessionLocal = sessionmaker(bind=engine)
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        tables_info = []
        
        # Users
        users_count = db.query(User).count()
        active_users = db.query(User).filter(User.is_active == True).count()
        admins = db.query(User).filter(User.role == 'admin').count()
        tables_info.append({
            'table': 'users',
            'count': users_count,
            'details': f'–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}, –ê–¥–º–∏–Ω–æ–≤: {admins}'
        })
        
        # Articles
        articles_count = db.query(Article).count()
        tables_info.append({
            'table': 'articles',
            'count': articles_count,
            'details': None
        })
        
        # Categories
        categories_count = db.query(Category).count()
        tables_info.append({
            'table': 'categories',
            'count': categories_count,
            'details': None
        })
        
        # Tags
        tags_count = db.query(Tag).count()
        tables_info.append({
            'table': 'tags',
            'count': tags_count,
            'details': None
        })
        
        # Chat Messages
        messages_count = db.query(ChatMessage).count()
        messages_with_feedback = db.query(ChatMessage).filter(ChatMessage.feedback != None).count()
        tables_info.append({
            'table': 'chat_messages',
            'count': messages_count,
            'details': f'–° –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é: {messages_with_feedback}'
        })
        
        # Documents
        documents_count = db.query(Document).count()
        processed_docs = db.query(Document).filter(Document.processing_status == 'completed').count()
        pending_docs = db.query(Document).filter(Document.processing_status == 'pending').count()
        tables_info.append({
            'table': 'documents',
            'count': documents_count,
            'details': f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_docs}, –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_docs}'
        })
        
        # Document Chunks
        chunks_count = db.query(DocumentChunk).count()
        chunks_with_embedding = db.query(DocumentChunk).filter(DocumentChunk.embedding != None).count()
        tables_info.append({
            'table': 'document_chunks',
            'count': chunks_count,
            'details': f'–° —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: {chunks_with_embedding}'
        })
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ê–ë–õ–ò–¶–ê–ú:")
        print("-" * 60)
        total_records = 0
        
        for info in tables_info:
            status = "‚úÖ" if info['count'] > 0 else "‚ö†Ô∏è"
            print(f"{status} {info['table']:20} : {info['count']:5} –∑–∞–ø–∏—Å–µ–π", end="")
            if info['details']:
                print(f" ({info['details']})")
            else:
                print()
            total_records += info['count']
        
        print("-" * 60)
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {total_records}")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
        if articles_count > 0:
            print("\nüìÑ –ü–†–ò–ú–ï–†–´ –°–¢–ê–¢–ï–ô:")
            print("-" * 60)
            articles = db.query(Article).limit(5).all()
            for article in articles:
                print(f"  ID: {article.id}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article.title[:50]}...")
                print(f"    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(article.categories)}, –¢–µ–≥–∏: {len(article.tags)}")
        
        if documents_count > 0:
            print("\nüìÅ –ü–†–ò–ú–ï–†–´ –î–û–ö–£–ú–ï–ù–¢–û–í:")
            print("-" * 60)
            documents = db.query(Document).limit(5).all()
            for doc in documents:
                print(f"  ID: {doc.id}, –§–∞–π–ª: {doc.filename}")
                print(f"    –°—Ç–∞—Ç—É—Å: {doc.processing_status}, –ß–∞–Ω–∫–æ–≤: {len(doc.chunks)}")
        
        if messages_count > 0:
            print("\nüí¨ –ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:")
            print("-" * 60)
            messages = db.query(ChatMessage).order_by(ChatMessage.created_at.desc()).limit(5).all()
            for msg in messages:
                print(f"  ID: {msg.id}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.user_id}")
                print(f"    –°–æ–æ–±—â–µ–Ω–∏–µ: {msg.message[:50]}...")
                print(f"    –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {'‚úÖ' if msg.feedback else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        print("\nüîó –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô:")
        print("-" * 60)
        
        if articles_count > 0:
            articles_with_categories = db.query(Article).join(Article.categories).distinct().count()
            articles_with_tags = db.query(Article).join(Article.tags).distinct().count()
            print(f"  –°—Ç–∞—Ç–µ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {articles_with_categories}/{articles_count}")
            print(f"  –°—Ç–∞—Ç–µ–π —Å —Ç–µ–≥–∞–º–∏: {articles_with_tags}/{articles_count}")
        
        if documents_count > 0:
            documents_with_categories = db.query(Document).join(Document.categories).distinct().count()
            documents_with_tags = db.query(Document).join(Document.tags).distinct().count()
            print(f"  –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {documents_with_categories}/{documents_count}")
            print(f"  –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏: {documents_with_tags}/{documents_count}")
        
        db.close()
        
        print("\n" + "="*60)
        if total_records > 0:
            print("‚úÖ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ")
        else:
            print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        print("="*60)
        
        return total_records > 0
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return False


if __name__ == "__main__":
    try:
        check_database()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")

