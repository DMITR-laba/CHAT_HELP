"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–µ–π –∏–∑ articles.json –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import json
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from sqlalchemy.orm import Session
from models import SessionLocal, engine, Base
from models.database import Article, Category, Tag
from app.core.config import settings
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def import_articles():
    """–ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–µ–π –∏–∑ articles.json"""
    print("\n" + "="*60)
    print("–ò–ú–ü–û–†–¢ –°–¢–ê–¢–ï–ô –ò–ó articles.json")
    print("="*60)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª articles.json (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏)
    articles_file = None
    possible_paths = [
        Path(__file__).parent / "articles.json",  # –í –ø–∞–ø–∫–µ backend
        Path(__file__).parent.parent / "articles.json",  # –í –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        Path("/app/articles.json"),  # –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    ]
    
    for path in possible_paths:
        if path.exists():
            articles_file = path
            break
    
    if not articles_file:
        print(f"‚ùå –§–∞–π–ª articles.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏: {possible_paths}")
        return False
    
    print(f"\n–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {articles_file}")
    
    # –ß–∏—Ç–∞–µ–º JSON
    try:
        with open(articles_file, 'r', encoding='utf-8') as f:
            articles_data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles_data)}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    Base.metadata.create_all(bind=engine)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    db: Session = SessionLocal()
    
    try:
        imported = 0
        updated = 0
        errors = []
        
        for idx, article_data in enumerate(articles_data, 1):
            try:
                title = article_data.get('title', '')
                text = article_data.get('text', '')
                url = article_data.get('url', '')
                language = article_data.get('language', 'ru')
                
                if not title or not text:
                    errors.append(f"–°—Ç–∞—Ç—å—è #{idx}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title –∏–ª–∏ text")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ç—å—è —Å —Ç–∞–∫–∏–º URL
                existing_article = db.query(Article).filter(Article.url == url).first()
                
                if existing_article:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                    existing_article.title = title
                    existing_article.text = text
                    existing_article.language = language
                    updated += 1
                    print(f"  [{idx}/{len(articles_data)}] –û–±–Ω–æ–≤–ª–µ–Ω–∞: {title[:50]}...")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    new_article = Article(
                        title=title,
                        text=text,
                        url=url,
                        language=language
                    )
                    db.add(new_article)
                    imported += 1
                    print(f"  [{idx}/{len(articles_data)}] –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {title[:50]}...")
                
                # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                if (idx % 10) == 0:
                    db.commit()
                    
            except Exception as e:
                errors.append(f"–°—Ç–∞—Ç—å—è #{idx}: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç—å–∏ #{idx}: {e}")
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        db.commit()
        
        print("\n" + "="*60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê:")
        print("="*60)
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö: {imported}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
        
        if errors:
            print(f"\n–û—à–∏–±–∫–∏:")
            for error in errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                print(f"  - {error}")
            if len(errors) > 10:
                print(f"  ... –∏ –µ—â–µ {len(errors) - 10} –æ—à–∏–±–æ–∫")
        
        print("\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        db.rollback()
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return False
    finally:
        db.close()


if __name__ == "__main__":
    try:
        import_articles()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")

