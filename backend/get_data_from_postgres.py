"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL
–ü—Ä–æ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
"""
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
POSTGRES_CONFIGS = [
    {
        "host": "localhost",
        "port": 5432,
        "db": "vectordb",
        "user": "postgres",
        "password": "password"
    },
    {
        "host": "127.0.0.1",
        "port": 5432,
        "db": "vectordb",
        "user": "postgres",
        "password": "password"
    },
    {
        "host": "postgres",
        "port": 5432,
        "db": "vectordb",
        "user": "postgres",
        "password": "password"
    },
    {
        "host": "db",
        "port": 5432,
        "db": "vectordb",
        "user": "postgres",
        "password": "password"
    }
]


def try_connect_postgres():
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL"""
    print("\n" + "="*60)
    print("–ü–û–ü–´–¢–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö POSTGRESQL")
    print("="*60)
    
    connected = False
    working_config = None
    
    for i, config in enumerate(POSTGRES_CONFIGS, 1):
        url = f"postgresql://{config['user']}:{config['password']}@{config['host']}:{config['port']}/{config['db']}"
        print(f"\n–ü–æ–ø—ã—Ç–∫–∞ {i}/{len(POSTGRES_CONFIGS)}: {config['host']}:{config['port']}...")
        
        try:
            engine = create_engine(
                url, 
                pool_pre_ping=True, 
                connect_args={
                    "connect_timeout": 3,
                    "client_encoding": "utf8"
                }
            )
            with engine.connect() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
                result = conn.execute(text("SELECT version()"))
                version = result.fetchone()[0]
                
            print(f"‚úÖ –£–°–ü–ï–®–ù–û –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!")
            print(f"   –í–µ—Ä—Å–∏—è: {version.split(',')[0]}")
            connected = True
            working_config = config
            working_url = url
            break
            
        except Exception as e:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_str = repr(e) if hasattr(e, '__repr__') else str(e)
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
            try:
                error_msg = error_str.encode('ascii', 'ignore').decode('ascii')
            except:
                error_msg = str(type(e).__name__)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if "could not translate host name" in error_str or "could not connect" in error_str.lower():
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error_msg[:60]}...")
            else:
                # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ): {error_msg[:60]}...")
                # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
                try:
                    import psycopg2
                    conn = psycopg2.connect(
                        host=config['host'],
                        port=config['port'],
                        database=config['db'],
                        user=config['user'],
                        password=config['password'],
                        connect_timeout=3
                    )
                    print(f"   –ù–æ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ psycopg2 —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    conn.close()
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —ç—Ç–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                    engine = create_engine(
                        url, 
                        pool_pre_ping=True,
                        connect_args={"client_encoding": "utf8"}
                    )
                    connected = True
                    working_config = config
                    working_url = url
                    break
                except Exception as e2:
                    continue
            continue
    
    if not connected:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –Ω–∏ —Å –æ–¥–Ω–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("   2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("   3. –ü–æ—Ä—Ç 5432 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   4. –î–ª—è Docker: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –ø–æ—Ä—Ç –Ω–µ –ø—Ä–æ–±—Ä–æ—à–µ–Ω")
        return None
    
    print(f"\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    print(f"   –•–æ—Å—Ç: {working_config['host']}")
    print(f"   –ü–æ—Ä—Ç: {working_config['port']}")
    print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {working_config['db']}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        print("\nüìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –¢–ê–ë–õ–ò–¶:")
        print("-" * 60)
        
        result = db.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """))
        tables = [row[0] for row in result.fetchall()]
        
        if not tables:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"  - {table}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        print("\nüìä –î–ê–ù–ù–´–ï –ò–ó –¢–ê–ë–õ–ò–¶:")
        print("="*60)
        
        total_records = 0
        
        for table_name in tables:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                result = db.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
                count = result.fetchone()[0]
                total_records += count
                
                status = "‚úÖ" if count > 0 else "‚ö†Ô∏è"
                print(f"\n{status} {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                
                if count > 0:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏
                    result = db.execute(text(f"SELECT * FROM {table_name} LIMIT 3"))
                    rows = result.fetchall()
                    columns = result.keys()
                    
                    print(f"   –°—Ç–æ–ª–±—Ü—ã: {', '.join(columns)}")
                    print(f"   –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
                    
                    for idx, row in enumerate(rows, 1):
                        row_dict = dict(zip(columns, row))
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π
                        preview = {}
                        for key in list(row_dict.keys())[:5]:
                            value = row_dict[key]
                            if isinstance(value, str) and len(value) > 50:
                                preview[key] = value[:50] + "..."
                            elif isinstance(value, (bytes, memoryview)):
                                preview[key] = f"<binary {len(value)} bytes>"
                            else:
                                preview[key] = value
                        
                        print(f"      {idx}. {preview}")
                        
                        if idx >= 3:
                            break
                    
                    if count > 3:
                        print(f"      ... –∏ –µ—â–µ {count - 3} –∑–∞–ø–∏—Å–µ–π")
                        
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
                continue
        
        print("\n" + "="*60)
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {total_records}")
        print("="*60)
        
        if total_records == 0:
            print("\n‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
        else:
            print("\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")
        
        db.close()
        return working_url
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        db.close()
        return None


if __name__ == "__main__":
    try:
        url = try_connect_postgres()
        if url:
            print(f"\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:")
            print(f"   DATABASE_URL_ENV={url}")
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")

