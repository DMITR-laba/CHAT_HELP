#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º pgvector
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç Docker –¥–ª—è backend
"""
import sys
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

sys.path.insert(0, str(Path(__file__).parent / "backend"))

from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError
import logging
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
POSTGRES_HOST = os.getenv('POSTGRES_HOST', 'localhost')
POSTGRES_PORT = int(os.getenv('POSTGRES_PORT', 5432))
POSTGRES_DB = os.getenv('POSTGRES_DB', 'vectordb')
POSTGRES_USER = os.getenv('POSTGRES_USER', 'postgres')
POSTGRES_PASSWORD = os.getenv('POSTGRES_PASSWORD', 'password')


def setup_postgres_vector():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º pgvector"""
    print("\n" + "="*60)
    print("–ù–ê–°–¢–†–û–ô–ö–ê POSTGRESQL –° PGVECTOR")
    print("="*60)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    hosts_to_try = [
        POSTGRES_HOST,
        "localhost",
        "127.0.0.1",
    ]
    
    database_urls = []
    for host in hosts_to_try:
        url = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{host}:{POSTGRES_PORT}/{POSTGRES_DB}"
        database_urls.append(url)
    
    engine = None
    working_url = None
    
    for url in database_urls:
        try:
            print(f"\n–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: {url.replace(POSTGRES_PASSWORD, '***')}")
            engine = create_engine(url, pool_pre_ping=True)
            
            with engine.connect() as connection:
                connection.execute(text("SELECT 1"))
            
            working_url = url
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            break
        except OperationalError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
            continue
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            continue
    
    if not engine or not working_url:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"  POSTGRES_HOST={POSTGRES_HOST}")
        print(f"  POSTGRES_PORT={POSTGRES_PORT}")
        print(f"  POSTGRES_DB={POSTGRES_DB}")
        print(f"  POSTGRES_USER={POSTGRES_USER}")
        return False
    
    print(f"\n–†–∞–±–æ—á–∏–π URL: {working_url.replace(POSTGRES_PASSWORD, '***')}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ vector
        print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector...")
        with engine.connect() as connection:
            try:
                connection.execute(text("CREATE EXTENSION IF NOT EXISTS vector"))
                connection.commit()
                print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                if "already exists" in str(e).lower() or "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(e).lower():
                    print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                else:
                    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        from models import Base
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π...")
        with engine.connect() as connection:
            result = connection.execute(text("""
                SELECT extname, extversion 
                FROM pg_extension 
                WHERE extname = 'vector'
            """))
            row = result.fetchone()
            if row:
                print(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ vector –≤–µ—Ä—Å–∏–∏ {row[1]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print("‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ vector –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        
        print("\n" + "="*60)
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("="*60)
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return False


if __name__ == "__main__":
    try:
        setup_postgres_vector()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")

